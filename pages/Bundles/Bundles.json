{
  "unpublishedPage": {
    "name": "Bundles",
    "slug": "bundles",
    "customSlug": "bundles",
    "layouts": [
      {
        "viewMode": false,
        "dsl": {
          "widgetName": "MainContainer",
          "backgroundColor": "none",
          "rightColumn": 1224,
          "snapColumns": 64,
          "detachFromLayout": true,
          "widgetId": "0",
          "topRow": 0,
          "bottomRow": 1370,
          "containerStyle": "none",
          "snapRows": 99,
          "parentRowSpace": 1,
          "type": "CANVAS_WIDGET",
          "canExtend": true,
          "version": 86,
          "minHeight": 1010,
          "parentColumnSpace": 1,
          "dynamicBindingPathList": [],
          "leftColumn": 0
        },
        "layoutOnLoadActions": [
          [
            {
              "id": "Bundles_apis.getJSONPage",
              "name": "apis.getJSONPage",
              "collectionId": "Bundles_apis",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  return `\n\t\t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.64.0/codemirror.min.css\">\n\t\t\t\t\n\t\t\t\t\t<p style=\"color:#191919;font-family:sans-serif\">Code from the bundle!</p>\n\t\t\t    <textarea id=\"codeFromBundle\" name=\"code\" style=\"border:solid 1px grey;\"></textarea>\n\t\t\t\t\t<p style=\"color:#191919;font-family:sans-serif\">Code from <a id=\"githublink\" href=\"url\" target=\"_blank\" rel=\"noopener noreferrer\">github</a></p>\n\t\t\t    <textarea id=\"codeFromGithub\" name=\"code\" style=\"border:solid 1px grey;padding:50px\"></textarea>\n\t\t\t\t\t\n\t\t\t    <script src=\"https://cdn.jsdelivr.net/npm/zip-loader@1.2.0/dist/zip-loader.min.js\"></script>\n\t\t\t\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.64.0/codemirror.min.js\"></script>\n\t\t\t\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.64.0/mode/javascript/javascript.min.js\"></script>\n\t\t\t\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.9/beautify.min.js\"></script>\n\t\t\t    <script>\n\t\t\t\t\t\tlet loader;\n\t\t\t      const decompressBlob = async blob => {\n\t\t\t        const ds = new DecompressionStream('gzip');\n\t\t\t        const decompressedStream = blob.stream().pipeThrough(ds);\n\t\t\t        const r = await new Response(decompressedStream).blob();\n\t\t\t        return r;\n\t\t\t      }\n\t\t\t      const toBlob = (data, type = 'application/octet-stream') => fetch(\"data:application/octet-stream;base64,\".concat(data)).then(res => {\n\t\t\t        return res.blob();\n\t\t\t      });\n\t\t\t      const getBundle = async (data) => {\n\t\t\t        const gzipBlob = await toBlob(data);\n\t\t\t        const fullText = await decompressBlob(gzipBlob).then(b => b.text());\n\t\t\t        const bundle = JSON.parse(fullText);\n\t\t\t        if (!('moduleFormat' in bundle)) {\n\t\t\t          throw Error('no moduleFormat');\n\t\t\t        }\n\t\t\t        console.log(fullText);\n\t\t\t        const size = fullText.length;\n\t\t\t        return {\n\t\t\t          bundle,\n\t\t\t          size\n\t\t\t        };\n\t\t\t      }\n\t\t\t\t\t\t\n\t\t\t      const getZipLoader = async bundle => {\n\t\t\t        const {\n\t\t\t          moduleFormat\n\t\t\t        } = bundle;\n\t\t\t        console.log(moduleFormat, 'TODO: check for endo type');\n\t\t\t        const {\n\t\t\t          endoZipBase64\n\t\t\t        } = bundle;\n\t\t\t        const zipBlob = await toBlob(endoZipBase64);\n\t\t\t        return ZipLoader.unzip(zipBlob);\n\t\t\t      }\n\t\t\t\t\t\t\n\t\t\t      const explore = async (data) => {\n\t\t\t        const {\n\t\t\t          bundle,\n\t\t\t          size: storedSize\n\t\t\t        } = await getBundle(data);\n\t\t\t        loader = await getZipLoader(bundle);\n\t\t\t        const cmap = loader.extractAsJSON('compartment-map.json');\n\t\t\t        const {\n\t\t\t          files\n\t\t\t        } = loader;\n\t\t\t        const map = [];\n\t\t\t        //const tbody = $('tbody');\n\t\t\t        let totalSize = 0;\n\t\t\t        for (const name of Object.keys(files)) {\n\t\t\t          const size = loader.extractAsText(name).length;\n\t\t\t          console.log(size, name);\n\t\t\t          map.push({\n\t\t\t            file: name,\n\t\t\t            size\n\t\t\t          });\n\t\t\t          totalSize += size;\n\t\t\t        }\n\t\t\t        return {\n\t\t\t          storedSize,\n\t\t\t          files: map\n\t\t\t        };\n\t\t\t      };\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst packageNames = {\n\t\t\t\t\t\t\t'ertp': 'ERTP',\n\t\t\t\t\t\t\t'swingset-vat': 'SwingSet'\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst constructUrl = (base, namespace, filename) => {\n\t\t\t\t\t\t\t\tlet parts = filename.split('/');\n\t\t\t\t\t\t\t\tif (!parts[1].match(/-v[0-9]/g)) {\n\t\t\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet package = parts[1].split('-v0')[0];\n\t\t\t\t\t\t\t\tlet realPackage = packageNames[package] || package;\n\t\t\t\t\t\t\t\tlet filePart = parts.slice(2).join('/');\n\t\t\t\t\t\t\t\tlet version = \\`0\\${parts[1].split('-v0').slice(1).join('-')}\\`;\n\n\t\t\t\t\t\t\t\treturn \\`\\${base}/\\${namespace}/\\${package}@\\${version}/packages/\\${realPackage}/\\${filePart}\\`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst fileToGhUrl = (filename) => {\n\t\t\t\t\t\t\t\tconst package = filename.split('/')[0];\n\t\t\t\t\t\t\t\tconst packageToBase = {\n\t\t\t\t\t\t\t\t\t\"@agoric\": \"https://raw.githubusercontent.com/Agoric/agoric-sdk\",\n\t\t\t\t\t\t\t\t\t\"@endo\": \"https://raw.githubusercontent.com/endojs/endo\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn packageToBase[package] && constructUrl(packageToBase[package], package, filename);\n\t\t\t\t\t\t}\n\n\t\t\t      const githubCode = (url, type = 'application/text') => fetch(url).then(res => {\n\t\t\t        return res;\n\t\t\t      });\n\n\t\t\t\t\t\tvar codeFromBundle = CodeMirror.fromTextArea(document.getElementById(\"codeFromBundle\"), {\n\t\t\t\t\t\t\tlineNumbers: true,\n\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t\tmode: \"javascript\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar codeFromGithub = CodeMirror.fromTextArea(document.getElementById(\"codeFromGithub\"), {\n\t\t\t\t\t\t\tlineNumbers: true,\n\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t\tmode: \"javascript\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\t codeFromBundle.setSize(\"100%\", \"450px\");\n\t\t\t\t\t\t codeFromGithub.setSize(\"100%\", \"450px\");\n\t\t\t\t\t\t\n\t\t\t\t\t   window.addEventListener('message', (event) => {\n\t\t\t\t\t\t \t\tconsole.log(event.data);\n\t\t\t\t\t\t \t\tif (event.data.file != undefined) {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlet url = fileToGhUrl(event.data.file)\n\t\t\t\t\t\t\t\t\tif (url != undefined) {\n\t\t\t\t\t\t\t\t\t\tlet code = githubCode(url).then(res => {\n\t\t\t\t\t\t\t\t\t\t\treturn res.text();\t\n\t\t\t\t\t\t\t\t\t\t}).then(text => {\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tcodeFromGithub.setValue(text);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcodeFromGithub.setValue('Cannot fetch github code for this file!');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tlet fileText = '';\n\t\t\t\t\t\t\t\t\tif (event.data.file.endsWith('json')) {\n\t\t\t\t\t\t\t\t\t\tfileText = loader.extractAsJSON(event.data.file);\n\t\t\t\t\t\t\t\t\t\tfileText = JSON.stringify(fileText);\n\t\t\t\t\t\t\t\t\t\tfileText = js_beautify(fileText);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tfileText = loader.extractAsText(event.data.file);\n\t\t\t\t\t\t\t\t\t\tif (event.data.beautify === true) {\n\t\t\t\t\t\t\t\t\t\t\tfileText = JSON.parse(fileText);\n\t\t\t\t\t\t\t\t\t\t\tfileText = fileText.__syncModuleProgram__;\n\t\t\t\t\t\t\t\t\t\t\tfileText = fileText.replaceAll(/\\\\n\\\\n+/g, '\\\\n\\\\n');\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tfileText = js_beautify(fileText);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tcodeFromBundle.setValue(fileText);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t} else if (event.data.data != undefined) {\n\t\t\t\t\t\t\t\t\texplore(event.data.data).then(r => {\n\t\t\t\t\t\t\t\t\t\twindow.parent.postMessage(r, \"*\");\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t</script>\n\t\t\t`;\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Bundles_apis.getBundleData",
              "name": "apis.getBundleData",
              "collectionId": "Bundles_apis",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  apis.tx = searchInput.text;\n  if (!searchInput.text) {\n    console.log(`in: ${searchInput.text}`);\n    if (appsmith.URL.queryParams.tx != undefined && appsmith.URL.queryParams.tx != null) {\n      console.log(`innn: ${appsmith.URL.queryParams.tx}`);\n      apis.tx = appsmith.URL.queryParams.tx;\n      searchInput.setValue(appsmith.URL.queryParams.tx);\n    }\n  }\n  if (!searchInput.text) {\n    return false;\n  }\n  let response = await GetTxApi.run();\n  let s = {\n    data: response.tx.body.messages[0].compressed_bundle\n  };\n  postWindowMessage(s, 'Iframe1', \"*\");\n  return true;\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Bundles_apis.getBundleTxs",
              "name": "apis.getBundleTxs",
              "collectionId": "Bundles_apis",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  showModal('Modal1');\n  const txs = [];\n  const response = await GetBundleInstallTxs.run();\n  if (!response || !response.result) {\n    closeModal('Modal1');\n    return txs;\n  }\n  for (const tx of response.result.txs) {\n    txs.push({\n      tx: tx.hash,\n      height: tx.height\n    });\n  }\n  closeModal('Modal1');\n  return txs;\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Bundles_apis.pageLoad",
              "name": "apis.pageLoad",
              "collectionId": "Bundles_apis",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  if (appsmith.URL.queryParams.tx != undefined && appsmith.URL.queryParams.tx != null) {\n    searchInput.setValue(appsmith.URL.queryParams.tx);\n  }\n  if (appsmith.URL.queryParams.apinetwork) {\n    networkInput.setSelectedOption(appsmith.URL.queryParams.apinetwork);\n  }\n  apis.getBundleData();\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ]
        ],
        "layoutOnLoadActionErrors": [],
        "validOnPageLoadActions": true,
        "id": "Bundles",
        "deleted": false,
        "policies": [],
        "userPermissions": []
      }
    ],
    "userPermissions": [],
    "policies": [],
    "isHidden": false
  },
  "deleted": false,
  "gitSyncId": "650ebdc3f3d421401941b61d_651b0b84338bcc55ca3b16e1"
}